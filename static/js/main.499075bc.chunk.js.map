{"version":3,"sources":["componentes/Header.js","componentes/Noticia.js","componentes/Noticias.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","background","href","Noticia","props","noticia","urlToImage","url","title","description","source","author","src","alt","name","target","rel","Noticias","this","noticias","map","key","Component","App","state","consultarNoticias","fetch","then","respuesta","json","setState","articles","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qMAYeA,EAVA,WACb,OACE,yBAAKC,UAAU,6DAA6DC,MAAO,CAACC,WAAW,YAC7F,uBAAGF,UAAU,6BAA6BG,KAAK,KAA/C,uB,SCsBSC,EAzBC,SAACC,GAAW,IAAD,EACoCA,EAAMC,QAA9DC,EADoB,EACpBA,WAAYC,EADQ,EACRA,IAAKC,EADG,EACHA,MAAOC,EADJ,EACIA,YAAaC,EADjB,EACiBA,OAAQC,EADzB,EACyBA,OAIlD,OAHIL,IACF,EAAKA,WAAa,yEAGlB,yBAAKP,UAAU,iBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,eAAea,IAAKN,EAAYO,IAAKL,IACpD,0BAAMT,UAAU,cAAcW,EAAOI,MACrC,yBAAKf,UAAU,YACb,wBAAIA,UAAU,cAAcS,GAC5B,uBAAGT,UAAU,aAAaU,GAC1B,0BAAMV,UAAU,cAAhB,UAAqCY,GACrC,6BACA,uBAAGT,KAAMK,EAAKR,UAAU,oDAAoDgB,OAAO,SAASC,IAAI,uBAAhG,iBAIJ,+BCCSC,E,iLAfX,OACE,yBAAKlB,UAAU,OACZmB,KAAKd,MAAMe,SAASC,IAAI,SAAAf,GAAO,OAC9B,kBAAC,EAAD,CACEgB,IAAOhB,EAAQE,IACfF,QAAWA,W,GAPAiB,aCyCRC,E,2MAtCbC,MAAQ,CACNL,SAAW,I,EAObM,kBAAoB,WAGlBC,MAFU,6GAGPC,KAAK,SAAAC,GACJ,OAAOA,EAAUC,SAElBF,KAAK,SAAAR,GACJ,EAAKW,SAAS,CACZX,SAAUA,EAASY,c,mFAZzBb,KAAKO,sB,+BAmBL,OACE,kBAAC,IAAMO,SAAP,KACE,kBAAC,EAAD,MACA,yBAAKjC,UAAU,aACb,kBAAC,EAAD,CACEoB,SAAYD,KAAKM,MAAML,iB,GA/BjBG,aCMEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC,gB","file":"static/js/main.499075bc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return(\n    <nav className=\"navbar navbar-light bg-light d-flex justify-content-center\" style={{background:\"#007bff\"}}>\n      <a className=\"navbar-brand text-bold m-2\" href=\"/\">\n        Noticias Actuales\n      </a>\n    </nav>\n  )\n}\n\nexport default Header;","import React from 'react'\n\nconst Noticia = (props) => {\n  var {urlToImage, url, title, description, source, author } = props.noticia;\n  if(!urlToImage){\n    this.urlToImage = \"http://arroceriaticktack.comprasporespaña.com/img/nodisponible.png\"\n  }\n  return(\n    <div className=\"col-md-4 mt-4\">\n      <div className=\"card\">\n        <img className=\"card-img-top\" src={urlToImage} alt={title} />\n        <span className=\"card-title\">{source.name}</span>\n        <div className=\"car-body\">\n          <h5 className=\"card-title\">{title}</h5>\n          <p className=\"card-text\">{description}</p>\n          <span className=\"card-title\">Autor: {author}</span>\n          <br />\n          <a href={url} className=\"btn btn-primary d-flex justify-content-center m-3\" target=\"_blank\" rel=\"noopener noreferrer\" >Leer Más</a>\n\n        </div>\n      </div>\n      <br />\n\n    </div>\n  )\n}\n\nexport default Noticia;","import React, { Component } from 'react'\n\n// importar el componente de Noticia\nimport Noticia from './Noticia';\n\nclass Noticias extends Component {\n  render() {\n    return(\n      <div className=\"row\">\n        {this.props.noticias.map(noticia => (\n          <Noticia \n            key = {noticia.url}\n            noticia = {noticia}\n          />\n\n        ))}\n\n      </div>\n    )\n  }\n}\n\nexport default Noticias;","import React, { Component } from 'react';\n\n// componentes propios\nimport Header from './componentes/Header';\nimport Noticias from './componentes/Noticias';\n\nclass App extends Component {\n\n  state = {\n    noticias : []\n  }\n\n  componentDidMount() {\n    this.consultarNoticias();\n  }\n  \n  consultarNoticias = () => {\n    let url = 'https://newsapi.org/v2/top-headlines?country=co&category=business&apiKey=63d551b6944e439888e91bf83ccda75f';\n  \n    fetch(url)\n      .then(respuesta => {\n        return respuesta.json();\n      })\n      .then(noticias => {\n        this.setState({\n          noticias: noticias.articles\n        })\n      })\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <div className=\"container\">\n          <Noticias\n            noticias = {this.state.noticias}\n          />\n        </div>\n        \n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}